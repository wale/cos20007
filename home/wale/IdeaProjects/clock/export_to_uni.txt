package au.id.wale.swin.clock

class Counter {
    private var _count: Int = 0

    val count: Int
        get() = _count

    fun increment() = _count++

    fun reset() {
        _count = 0
    }
}

class Clock {
    private var seconds = Counter()
    private var minutes = Counter()
    private var hours = Counter()

    val currentTime: String
        get() {
            val formattedHours = "%02d".format(hours.count)
            val formattedMinutes = "%02d".format(minutes.count)
            val formattedSeconds = "%02d".format(seconds.count)

            return "${formattedHours}:${formattedMinutes}:${formattedSeconds}"
        }

    fun reset() {
        seconds.reset()
        minutes.reset()
        hours.reset()
    }

    fun tick() {
        if(seconds.count < 59) {
            seconds.increment()
        } else {
            seconds.reset()
            if(minutes.count < 59) {
                minutes.increment()
            } else {
                minutes.reset()
                if (hours.count > 23) {
                    hours.reset()
                } else {
                    hours.increment()
                }
            }
        }
    }
}

fun main() {
    val clock = Clock()
    // Loop 120 times (120 ticks = 120 seconds), which *should* equal 2 hours.
    for (i in 1..120) {
        clock.tick()
        Thread.sleep(400) // Update every 400 milliseconds
        print("\r${clock.currentTime}")
    }
}